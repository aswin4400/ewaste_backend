# Generated by Django 2.1.7 on 2019-03-02 10:04

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('usertype', models.CharField(choices=[('SELLER', 'Seller'), ('BUYER', 'Buyer'), ('ADMIN', 'Admin'), ('DEVICE_MANUFACTURER', 'Device_Manufacturer')], default='BUYER', max_length=50)),
                ('user_slug', models.SlugField(max_length=25, null=True)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AddressOne',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('phone_number', models.PositiveIntegerField()),
                ('pincode', models.PositiveIntegerField()),
                ('locality', models.TextField()),
                ('address', models.TextField()),
                ('city_district_town', models.CharField(choices=[('CITY', 'City'), ('DISTRICT', 'District'), ('TOWN', 'Town')], default='CITY', max_length=50)),
                ('state', models.CharField(max_length=20)),
                ('landmark', models.CharField(max_length=50)),
                ('address_type', models.CharField(choices=[('HOME', 'Home'), ('WORK', 'Work')], default='HOME', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='AddressTwo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('phone_number', models.PositiveIntegerField()),
                ('pincode', models.PositiveIntegerField()),
                ('locality', models.TextField()),
                ('address', models.TextField()),
                ('city_district_town', models.CharField(choices=[('CITY', 'City'), ('DISTRICT', 'District'), ('TOWN', 'Town')], default='CITY', max_length=50)),
                ('state', models.CharField(max_length=20)),
                ('landmark', models.CharField(max_length=50)),
                ('address_type', models.CharField(choices=[('HOME', 'Home'), ('WORK', 'Work')], default='HOME', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Banner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.PositiveIntegerField()),
                ('quantity', models.PositiveIntegerField(default=1)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Bucket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('banners', models.ManyToManyField(related_name='banner_cart', to='shop.Banner')),
                ('buyer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='buyer_cart', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Component',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('model_number', models.PositiveIntegerField()),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('model_number', models.PositiveIntegerField()),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('components', models.ManyToManyField(related_name='components', to='shop.Component')),
                ('manufacturer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='device_manufacturer', to=settings.AUTH_USER_MODEL)),
                ('sellers', models.ManyToManyField(related_name='sellers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('document', models.FileField(upload_to='documents/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('approval', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('SHIPPED', 'Shipped'), ('DISPATCHED', 'Dispatched'), ('APPROVED', 'Approved'), ('DELIVERED', 'Delivered')], max_length=50, null=True)),
                ('delivery_data', models.DateTimeField(null=True)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Specification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(max_length=10)),
                ('hw_specification', models.TextField()),
                ('sw_specification', models.TextField()),
                ('support_notes', models.TextField()),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('banners', models.ManyToManyField(related_name='banner_wishlist', to='shop.Banner')),
                ('buyer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='buyer_wishlist', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.AddField(
            model_name='order',
            name='amount',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='shop.Payment'),
        ),
        migrations.AddField(
            model_name='order',
            name='banners',
            field=models.ManyToManyField(related_name='banner_order', to='shop.Banner'),
        ),
        migrations.AddField(
            model_name='order',
            name='buyer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='buyer_order', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='device',
            name='specification',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='shop.Specification'),
        ),
        migrations.AddField(
            model_name='component',
            name='specification',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='shop.Specification'),
        ),
        migrations.AddField(
            model_name='bucket',
            name='files',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.File'),
        ),
        migrations.AddField(
            model_name='banner',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='banner_device', to='shop.Device'),
        ),
        migrations.AddField(
            model_name='banner',
            name='seller',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='banner_seller', to=settings.AUTH_USER_MODEL),
        ),
    ]
